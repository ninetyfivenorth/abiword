--- abiword-2.0.1/abi/src/af/xap/xp/xap_Draw_Symbol.cpp.orig	2003-05-07 17:40:40.000000000 +0000
+++ abiword-2.0.1/abi/src/af/xap/xp/xap_Draw_Symbol.cpp	2003-10-30 13:19:59.000000000 +0000
@@ -153,7 +153,7 @@
 	
 	for (i = 0; i < m_vCharSet.size(); i += 2)
 	{
-		UT_UCSChar base = static_cast<UT_UCSChar>(reinterpret_cast<UT_uint32>(m_vCharSet[i]));
+		UT_UCSChar base = static_cast<UT_UCSChar>(reinterpret_cast<size_t>(m_vCharSet[i]));
 		size_t nb_chars = reinterpret_cast<size_t>(m_vCharSet[i + 1]);
 
 		for (UT_UCSChar j = base; j < base + nb_chars; ++j)
@@ -194,11 +194,11 @@
 	UT_DEBUGMSG(("calcSymbolFromCoords(x = [%u], y = [%u]) =", ix, iy));
 	for (size_t i = 0; i < m_vCharSet.size(); i += 2)
 	{
-		count += reinterpret_cast<UT_uint32>(m_vCharSet[i + 1]);
+		count += reinterpret_cast<size_t>(m_vCharSet[i + 1]);
 		if (count > index)
 		{
-			UT_DEBUGMSG((" %u\n", static_cast<UT_uint32>(reinterpret_cast<UT_uint32>(m_vCharSet[i]) + index - count + reinterpret_cast<UT_uint32>(m_vCharSet[i + 1]))));
-			return static_cast<UT_UCSChar>(reinterpret_cast<UT_uint32>(m_vCharSet[i]) + index - count + reinterpret_cast<UT_uint32>(m_vCharSet[i + 1]));
+			UT_DEBUGMSG((" %u\n", static_cast<UT_uint32>(reinterpret_cast<size_t>(m_vCharSet[i]) + index - count + reinterpret_cast<size_t>(m_vCharSet[i + 1]))));
+			return static_cast<UT_UCSChar>(reinterpret_cast<size_t>(m_vCharSet[i]) + index - count + reinterpret_cast<size_t>(m_vCharSet[i + 1]));
 		}
 	}
 
@@ -227,8 +227,8 @@
 
 	for (size_t i = 0; i < m_vCharSet.size(); i += 2)
 	{
-		UT_uint32 base = reinterpret_cast<UT_uint32>(m_vCharSet[i]);
-		UT_uint32 size = reinterpret_cast<UT_uint32>(m_vCharSet[i + 1]);
+		UT_uint32 base = reinterpret_cast<size_t>(m_vCharSet[i]);
+		UT_uint32 size = reinterpret_cast<size_t>(m_vCharSet[i + 1]);
 		
 		if (base + size > c)
 		{
--- abiword-2.0.1/abi/src/af/xap/unix/xap_UnixFont.cpp.orig	2003-08-22 20:52:07.000000000 +0000
+++ abiword-2.0.1/abi/src/af/xap/unix/xap_UnixFont.cpp	2003-10-30 13:31:22.000000000 +0000
@@ -400,10 +400,10 @@
 	size_t idx = 0;
 	for (size_t i = 0; i < coverage.size(); i += 2)
 	  {
-		  UT_UCSChar c1 = static_cast<UT_UCSChar>(reinterpret_cast<UT_uint32>(coverage[i]));
+		  UT_UCSChar c1 = static_cast<UT_UCSChar>(reinterpret_cast<size_t>(coverage[i]));
 		  UT_UCSChar c2 =
 			  static_cast<UT_UCSChar>(static_cast<UT_uint32>(c1)) +
-			  static_cast<UT_UCSChar>(reinterpret_cast<UT_uint32>(coverage[i + 1]));
+			  static_cast<UT_UCSChar>(reinterpret_cast<size_t>(coverage[i + 1]));
 		  for (UT_UCSChar c = c1; c < c2; ++c)
 		    {
 			    FT_UInt glyph_idx = FT_Get_Char_Index(face, c);
--- abiword-2.0.1/abi/src/wp/impexp/xp/ie_exp_HTML.cpp.orig	2003-09-23 09:34:59.000000000 +0000
+++ abiword-2.0.1/abi/src/wp/impexp/xp/ie_exp_HTML.cpp	2003-10-30 13:58:22.000000000 +0000
@@ -777,7 +777,7 @@
 	void * vptr = 0;
 	m_tagStack.pop (&vptr);
 
-	if (reinterpret_cast<UT_uint32>(vptr) == tagID) return;
+	if (static_cast<UT_uint32>(reinterpret_cast<size_t>(vptr)) == tagID) return;
 
 	UT_DEBUGMSG(("WARNING: possible tag mis-match in XHTML output!\n"));
 }
@@ -821,7 +821,7 @@
 UT_uint32 s_HTML_Listener::tagTop ()
 {
 	void * vptr = 0;
-	if (m_tagStack.viewTop (&vptr)) return reinterpret_cast<UT_uint32>(vptr);
+	if (m_tagStack.viewTop (&vptr)) return static_cast<UT_uint32>(reinterpret_cast<size_t>(vptr));
 	return 0;
 }
 
@@ -1898,7 +1898,7 @@
 {
 	void * vptr = 0;
 	m_utsListType.viewTop (&vptr);
-	return static_cast<UT_uint16>(reinterpret_cast<UT_uint32>(vptr));
+	return static_cast<UT_uint16>(reinterpret_cast<size_t>(vptr));
 }
 
 void s_HTML_Listener::listPush (UT_uint16 type, const char * ClassName)
@@ -1937,7 +1937,7 @@
 
 	void * vptr = 0;
 	m_utsListType.pop (&vptr);
-	UT_uint16 type = static_cast<UT_uint16>(reinterpret_cast<UT_uint32>(vptr));
+	UT_uint16 type = static_cast<UT_uint16>(reinterpret_cast<size_t>(vptr));
 
 	UT_uint32 tagID;
 
--- abiword-2.0.1/abi/src/wp/impexp/xp/ie_Table.cpp.orig	2003-08-25 01:45:11.000000000 +0000
+++ abiword-2.0.1/abi/src/wp/impexp/xp/ie_Table.cpp	2003-10-30 14:31:50.000000000 +0000
@@ -1028,7 +1028,7 @@
 			UT_sint32 j = 0;
 			for(j=0; !bMatch && (j < static_cast<UT_sint32>(m_vecCellX.getItemCount())); j++)
 			{
-				UT_sint32 prevX = reinterpret_cast<UT_sint32>(m_vecCellX.getNthItem(j));
+				UT_sint32 prevX = static_cast<UT_sint32>(reinterpret_cast<size_t>(m_vecCellX.getNthItem(j)));
 				UT_DEBUGMSG(("Prev cell %d cellx %d \n",j,prevX));
 				bool bLast = ((j-1) == szCurRow);
 				bMatch =  doCellXMatch(prevX,curX,bLast);
@@ -1179,7 +1179,7 @@
 		sColWidth.clear();
 		for(i=0; i< static_cast<UT_sint32>(m_vecCellX.getItemCount()); i++)
 		{
-			UT_sint32 iCellx = reinterpret_cast<UT_sint32>(m_vecCellX.getNthItem(i));
+			UT_sint32 iCellx = static_cast<UT_sint32>(reinterpret_cast<size_t>(m_vecCellX.getNthItem(i)));
 			xxx_UT_DEBUGMSG(("final cellx import cellx %d iPrev %x \n",iCellx,iPrev));
 			UT_sint32 iDiffCellx = iCellx - iPrev;
 			double dCellx = static_cast<double>(iDiffCellx)/1440.0 -dColSpace;
@@ -1377,7 +1377,7 @@
 	UT_sint32 iSub = 0;
 	for(i=0; !bFound && (i< static_cast<UT_sint32>(m_vecCellX.getItemCount())); i++)
 	{
-		UT_sint32 icellx = reinterpret_cast<UT_sint32>(m_vecCellX.getNthItem(i));
+		UT_sint32 icellx = static_cast<UT_sint32>(reinterpret_cast<size_t>(m_vecCellX.getNthItem(i)));
 		if(icellx == -1)
 		{
 			iSub++;
--- abiword-2.0.1/abi/src/wp/impexp/xp/ie_imp_RTF.cpp.orig	2003-09-19 08:03:26.000000000 +0000
+++ abiword-2.0.1/abi/src/wp/impexp/xp/ie_imp_RTF.cpp	2003-10-30 14:29:05.000000000 +0000
@@ -1211,9 +1211,9 @@
 		m_iOverrideLevel = other.m_iOverrideLevel;
 		if(m_tabTypes.getItemCount() > 0)
 		{
-			UT_uint32 dum = reinterpret_cast<UT_uint32>(m_tabTypes.getNthItem(0));
+			UT_uint32 dum = static_cast<UT_uint32>(reinterpret_cast<size_t>(m_tabTypes.getNthItem(0)));
 			m_curTabType = static_cast<eTabType>(dum);
-			dum = reinterpret_cast<UT_uint32>(m_tabLeader.getNthItem(0));
+			dum = static_cast<UT_uint32>(reinterpret_cast<size_t>(m_tabLeader.getNthItem(0)));
 			m_curTabLeader = static_cast<eTabLeader>(dum);
 		}
 		else
@@ -2449,7 +2449,7 @@
 {
 	if (colNum < m_colourTable.getItemCount())
 	{
-		return reinterpret_cast<UT_uint32>(m_colourTable.getNthItem(colNum));
+		return static_cast<UT_uint32>(reinterpret_cast<size_t>(m_colourTable.getNthItem(colNum)));
 	}
 	else
 	{
@@ -2461,7 +2461,7 @@
 {
 	if (colNum < m_colourTable.getItemCount())
 	{
-		return reinterpret_cast<UT_sint32>(m_colourTable.getNthItem(colNum));
+		return static_cast<UT_sint32>(reinterpret_cast<size_t>(m_colourTable.getNthItem(colNum)));
 	}
 	else
 	{
@@ -6277,11 +6277,11 @@
 			if (i > 0)
 				propBuffer += ",";
 
-			UT_sint32 tabTwips = reinterpret_cast<UT_sint32>(m_currentRTFState.m_paraProps.m_tabStops.getNthItem(i));
+			UT_sint32 tabTwips = static_cast<UT_sint32>(reinterpret_cast<size_t>(m_currentRTFState.m_paraProps.m_tabStops.getNthItem(i)));
 			double tabIn = tabTwips/(20.0*72.);
-			UT_uint32 idum = reinterpret_cast<UT_uint32>(m_currentRTFState.m_paraProps.m_tabTypes.getNthItem(i));
+			UT_uint32 idum = static_cast<UT_uint32>(reinterpret_cast<size_t>(m_currentRTFState.m_paraProps.m_tabTypes.getNthItem(i)));
 			eTabType tabType = static_cast<eTabType>(idum);
-			idum = reinterpret_cast<UT_uint32>((m_currentRTFState.m_paraProps.m_tabLeader.getNthItem(i)));
+			idum = static_cast<UT_uint32>(reinterpret_cast<size_t>(m_currentRTFState.m_paraProps.m_tabLeader.getNthItem(i)));
 			eTabLeader tabLeader = static_cast<eTabLeader>(idum);
 			char  cType = ' ';
 			switch(tabType)
@@ -9747,11 +9747,11 @@
 		if (i > 0)
 			strcat(propBuffer, ",");
 
-		UT_sint32 tabTwips = reinterpret_cast<UT_sint32>(pParas->m_tabStops.getNthItem(i));
+		UT_sint32 tabTwips = static_cast<UT_sint32>(reinterpret_cast<size_t>(pParas->m_tabStops.getNthItem(i)));
 		double tabIn = tabTwips/(20.0*72.);
-		UT_uint32 idum = reinterpret_cast<UT_uint32>(pParas->m_tabTypes.getNthItem(i));
+		UT_uint32 idum = static_cast<UT_uint32>(reinterpret_cast<size_t>(pParas->m_tabTypes.getNthItem(i)));
 		eTabType tabType = static_cast<eTabType>(idum);
-		idum = (UT_uint32) (pParas->m_tabLeader.getNthItem(i));
+		idum = (UT_uint32) (size_t) (pParas->m_tabLeader.getNthItem(i));
 		eTabLeader tabLeader = static_cast<eTabLeader>(idum);
 		char  cType = ' ';
 		switch(tabType)
